//https://neetcode.io/problems/word-break?list=blind75
public class Solution {
    
    // Approach 1: Dynamic Programming (Bottom-up) - Most intuitive
    public boolean wordBreak(String s, java.util.List<String> wordDict) {\n        if (s == null || s.length() == 0) {\n            return true;\n        }\n        \n        // Convert to HashSet for O(1) lookup\n        java.util.Set<String> wordSet = new java.util.HashSet<>(wordDict);\n        \n        int n = s.length();\n        // dp[i] represents if s[0...i-1] can be segmented\n        boolean[] dp = new boolean[n + 1];\n        \n        // Base case: empty string can always be segmented\n        dp[0] = true;\n        \n        // For each position in the string\n        for (int i = 1; i <= n; i++) {\n            // Check all possible word endings at position i\n            for (int j = 0; j < i; j++) {\n                // If s[0...j-1] can be segmented AND s[j...i-1] is a valid word\n                if (dp[j] && wordSet.contains(s.substring(j, i))) {\n                    dp[i] = true;\n                    break; // Found one valid segmentation, no need to check more\n                }\n            }\n        }\n        \n        return dp[n];\n    }\n    \n    // Approach 2: Optimized DP - Check words instead of all positions\n    public boolean wordBreakOptimized(String s, java.util.List<String> wordDict) {\n        if (s == null || s.length() == 0) {\n            return true;\n        }\n        \n        java.util.Set<String> wordSet = new java.util.HashSet<>(wordDict);\n        int n = s.length();\n        boolean[] dp = new boolean[n + 1];\n        dp[0] = true;\n        \n        for (int i = 1; i <= n; i++) {\n            // Instead of checking all j < i, check each word in dictionary\n            for (String word : wordSet) {\n                int wordLen = word.length();\n                \n                // Check if word can end at position i\n                if (wordLen <= i && dp[i - wordLen] && \n                    s.substring(i - wordLen, i).equals(word)) {\n                    dp[i] = true;\n                    break;\n                }\n            }\n        }\n        \n        return dp[n];\n    }\n    \n    // Approach 3: Recursive with Memoization (Top-down)\n    public boolean wordBreakRecursive(String s, java.util.List<String> wordDict) {\n        java.util.Set<String> wordSet = new java.util.HashSet<>(wordDict);\n        Boolean[] memo = new Boolean[s.length()];\n        return canBreak(s, 0, wordSet, memo);\n    }\n    \n    private boolean canBreak(String s, int start, java.util.Set<String> wordSet, Boolean[] memo) {\n        // Base case: reached end of string\n        if (start == s.length()) {\n            return true;\n        }\n        \n        // Check memoization\n        if (memo[start] != null) {\n            return memo[start];\n        }\n        \n        // Try all possible words starting from current position\n        for (int end = start + 1; end <= s.length(); end++) {\n            String word = s.substring(start, end);\n            \n            if (wordSet.contains(word) && canBreak(s, end, wordSet, memo)) {\n                memo[start] = true;\n                return true;\n            }\n        }\n        \n        memo[start] = false;\n        return false;\n    }\n    \n    // Approach 4: BFS (Breadth-First Search)\n    public boolean wordBreakBFS(String s, java.util.List<String> wordDict) {\n        java.util.Set<String> wordSet = new java.util.HashSet<>(wordDict);\n        java.util.Queue<Integer> queue = new java.util.LinkedList<>();\n        boolean[] visited = new boolean[s.length()];\n        \n        queue.offer(0);\n        \n        while (!queue.isEmpty()) {\n            int start = queue.poll();\n            \n            if (!visited[start]) {\n                visited[start] = true;\n                \n                for (int end = start + 1; end <= s.length(); end++) {\n                    if (wordSet.contains(s.substring(start, end))) {\n                        if (end == s.length()) {\n                            return true;\n                        }\n                        queue.offer(end);\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    // Approach 5: Trie-based solution\n    class TrieNode {\n        TrieNode[] children = new TrieNode[26];\n        boolean isWord = false;\n    }\n    \n    public boolean wordBreakTrie(String s, java.util.List<String> wordDict) {\n        // Build Trie\n        TrieNode root = new TrieNode();\n        for (String word : wordDict) {\n            TrieNode node = root;\n            for (char c : word.toCharArray()) {\n                int index = c - 'a';\n                if (node.children[index] == null) {\n                    node.children[index] = new TrieNode();\n                }\n                node = node.children[index];\n            }\n            node.isWord = true;\n        }\n        \n        int n = s.length();\n        boolean[] dp = new boolean[n + 1];\n        dp[0] = true;\n        \n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (dp[j] && searchInTrie(root, s, j, i - 1)) {\n                    dp[i] = true;\n                    break;\n                }\n            }\n        }\n        \n        return dp[n];\n    }\n    \n    private boolean searchInTrie(TrieNode root, String s, int start, int end) {\n        TrieNode node = root;\n        for (int i = start; i <= end; i++) {\n            int index = s.charAt(i) - 'a';\n            if (node.children[index] == null) {\n                return false;\n            }\n            node = node.children[index];\n        }\n        return node.isWord;\n    }\n    \n    // Helper method to demonstrate the DP process\n    public void demonstrateWordBreak(String s, java.util.List<String> wordDict) {\n        System.out.println(\"\\nDemonstrating Word Break for: \\\"\" + s + \"\\\"\");\n        System.out.println(\"Dictionary: \" + wordDict);\n        \n        java.util.Set<String> wordSet = new java.util.HashSet<>(wordDict);\n        int n = s.length();\n        boolean[] dp = new boolean[n + 1];\n        dp[0] = true;\n        \n        System.out.println(\"dp[0] = true (empty string)\");\n        \n        for (int i = 1; i <= n; i++) {\n            System.out.print(\"Position \" + i + \" (prefix \\\"\" + s.substring(0, i) + \"\\\"): \");\n            \n            for (int j = 0; j < i; j++) {\n                if (dp[j]) {\n                    String word = s.substring(j, i);\n                    if (wordSet.contains(word)) {\n                        System.out.print(\"Found word \\\"\" + word + \"\\\" from \" + j + \" to \" + i + \" \");\n                        dp[i] = true;\n                        break;\n                    }\n                }\n            }\n            \n            System.out.println(\"-> dp[\" + i + \"] = \" + dp[i]);\n        }\n        \n        System.out.println(\"Result: \" + dp[n]);\n    }\n    \n    // Method to find all possible word break combinations\n    public java.util.List<String> findAllWordBreaks(String s, java.util.List<String> wordDict) {\n        java.util.Set<String> wordSet = new java.util.HashSet<>(wordDict);\n        java.util.List<String> result = new java.util.ArrayList<>();\n        \n        if (wordBreak(s, wordDict)) {\n            findAllBreaksHelper(s, 0, wordSet, new java.util.ArrayList<>(), result);\n        }\n        \n        return result;\n    }\n    \n    private void findAllBreaksHelper(String s, int start, java.util.Set<String> wordSet, \n                                   java.util.List<String> current, java.util.List<String> result) {\n        if (start == s.length()) {\n            result.add(String.join(\" \", current));\n            return;\n        }\n
