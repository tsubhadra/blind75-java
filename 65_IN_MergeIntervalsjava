//https://neetcode.io/problems/merge-intervals?list=blind75
public class Solution {
    
    // Approach 1: Sort and Merge - Most intuitive and efficient
    public int[][] merge(int[][] intervals) {
        if (intervals == null || intervals.length <= 1) {
            return intervals;
        }
        
        // Sort intervals by start time
        java.util.Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        
        java.util.List<int[]> merged = new java.util.ArrayList<>();
        
        for (int[] interval : intervals) {
            // If merged is empty or current interval doesn't overlap with last
            if (merged.isEmpty() || 
                merged.get(merged.size() - 1)[1] < interval[0]) {
                
                merged.add(interval);
            } else {
                // Merge with the last interval
                merged.get(merged.size() - 1)[1] = 
                    Math.max(merged.get(merged.size() - 1)[1], interval[1]);
            }
        }
        
        return merged.toArray(new int[merged.size()][]);
    }
    
    // Approach 2: Sort and Merge with explicit overlap check
    public int[][] mergeExplicit(int[][] intervals) {
        if (intervals == null || intervals.length <= 1) {
            return intervals;
        }
        
        // Sort by start time
        java.util.Arrays.sort(intervals, 
                             (a, b) -> Integer.compare(a[0], b[0]));
        
        java.util.List<int[]> result = new java.util.ArrayList<>();
        int[] currentInterval = intervals[0];
        
        for (int i = 1; i < intervals.length; i++) {
            int[] nextInterval = intervals[i];
            
            // Check if intervals overlap
            if (isOverlapping(currentInterval, nextInterval)) {
                // Merge intervals
                currentInterval[1] = Math.max(currentInterval[1], 
                                            nextInterval[1]);
            } else {
                // No overlap, add current interval to result
                result.add(currentInterval);
                currentInterval = nextInterval;
            }
        }
        
        // Add the last interval
        result.add(currentInterval);
        
        return result.toArray(new int[result.size()][]);
    }
    
    // Approach 3: Using Stack-based approach
    public int[][] mergeStack(int[][] intervals) {
        if (intervals == null || intervals.length <= 1) {
            return intervals;
        }
        
        // Sort by start time
        java.util.Arrays.sort(intervals, 
                             (a, b) -> Integer.compare(a[0], b[0]));
        
        java.util.Stack<int[]> stack = new java.util.Stack<>();
        stack.push(intervals[0]);
        
        for (int i = 1; i < intervals.length; i++) {
            int[] current = intervals[i];
            int[] top = stack.peek();
            
            if (top[1] < current[0]) {
                // No overlap
                stack.push(current);
            } else {
                // Overlap, merge
                top[1] = Math.max(top[1], current[1]);
            }
        }
        
        return stack.toArray(new int[stack.size()][]);
    }
    
    // Approach 4: Two-pass approach (sort then merge)
    public int[][] mergeTwoPass(int[][] intervals) {
        if (intervals == null || intervals.length <= 1) {
            return intervals;
        }
        
        // First pass: sort
        java.util.Arrays.sort(intervals, 
                             (a, b) -> Integer.compare(a[0], b[0]));
        
        // Second pass: merge
        java.util.List<int[]> merged = new java.util.ArrayList<>();
        
        for (int[] interval : intervals) {
            if (merged.isEmpty()) {
                merged.add(interval);
            } else {
                int[] last = merged.get(merged.size() - 1);
                if (canMerge(last, interval)) {
                    // Merge
                    last[1] = Math.max(last[1], interval[1]);
                } else {
                    // Add new interval
                    merged.add(interval);
                }
            }
        }
        
        return merged.toArray(new int[merged.size()][]);
    }
    
    // Approach 5: Using TreeMap for automatic sorting and merging
    public int[][] mergeTreeMap(int[][] intervals) {
        if (intervals == null || intervals.length <= 1) {
            return intervals;
        }
        
        // Use TreeMap to maintain sorted order
        java.util.TreeMap<Integer, Integer> map = new java.util.TreeMap<>();
        
        // Add all intervals to map
        for (int[] interval : intervals) {
            map.put(interval[0], 
                   Math.max(map.getOrDefault(interval[0], interval[1]), 
                           interval[1]));
        }
        
        java.util.List<int[]> result = new java.util.ArrayList<>();
        
        for (java.util.Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int start = entry.getKey();
            int end = entry.getValue();
            
            if (result.isEmpty() || result.get(result.size() - 1)[1] < start) {
                result.add(new int[]{start, end});
            } else {
                result.get(result.size() - 1)[1] = 
                    Math.max(result.get(result.size() - 1)[1], end);
            }
        }
        
        return result.toArray(new int[result.size()][]);
    }
    
    // Helper method to check if two intervals overlap
    private boolean isOverlapping(int[] interval1, int[] interval2) {
        return interval1[1] >= interval2[0] && interval2[1] >= interval1[0];
    }
    
    // Helper method to check if two intervals can be merged
    private boolean canMerge(int[] interval1, int[] interval2) {
        return interval1[1] >= interval2[0];
    }
    
    // Method to demonstrate the merge process step by step
    public void demonstrateMerge(int[][] intervals) {
        System.out.println("\nDemonstrating Merge Intervals:");
        System.out.println("Original intervals: " + 
                          java.util.Arrays.deepToString(intervals));
        
        if (intervals == null || intervals.length <= 1) {
            System.out.println("No merging needed");
            return;
        }
        
        // Show sorting step
        int[][] sorted = intervals.clone();
        java.util.Arrays.sort(sorted, (a, b) -> Integer.compare(a[0], b[0]));
        System.out.println("After sorting: " + 
                          java.util.Arrays.deepToString(sorted));
        
        java.util.List<int[]> merged = new java.util.ArrayList<>();
        
        for (int i = 0; i < sorted.length; i++) {
            int[] current = sorted[i];
            
            System.out.print("\nStep " + (i + 1) + ": Processing " + 
                           java.util.Arrays.toString(current));
            
            if (merged.isEmpty()) {
                merged.add(current);
                System.out.println(" -> Added (first interval)");
            } else {
                int[] last = merged.get(merged.size() - 1);
                
                if (last[1] < current[0]) {
                    // No overlap
                    merged.add(current);
                    System.out.println(" -> Added (no overlap with " + 
                                     java.util.Arrays.toString(last) + ")");
                } else {
                    // Overlap, merge
                    int oldEnd = last[1];
                    last[1] = Math.max(last[1], current[1]);
                    System.out.println(" -> Merged with " + 
                                     java.util.Arrays.toString(
                                         new int[]{last[0], oldEnd}) + 
                                     " -> " + java.util.Arrays.toString(last));
                }
            }
            
            System.out.println("   Current result: " + 
                             formatIntervalList(merged));
        }
        
        System.out.println("\nFinal result: " + 
                          java.util.Arrays.deepToString(
                              merged.toArray(new int[merged.size()][])));
    }
    
    // Helper method to format interval list for display
    private String formatIntervalList(java.util.List<int[]> intervals) {
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        for (int i = 0; i < intervals.size(); i++) {
            if (i > 0) sb.append(", ");
            sb.append(java.util.Arrays.toString(intervals.get(i)));
        }
        sb.append("]");
        return sb.toString();
    }
    
    // Method to test various overlap scenarios
    public void testOverlapScenarios() {
        System.out.println("\nTesting Overlap Scenarios:");
        
        // Adjacent intervals (touching)
        int[][] touching = {{1, 2}, {2, 3}};
        System.out.println("Touching intervals " + 
                          java.util.Arrays.deepToString(touching) + 
                          " -> " + java.util.Arrays.deepToString(merge(touching)));
        
        // Completely overlapping
        int[][] completeOverlap = {{1, 4}, {2, 3}};
        System.out.println("Complete overlap " + 
                          java.util.Arrays.deepToString(completeOverlap) + 
                          " -> " + java.util.Arrays.deepToString(merge(completeOverlap)));
        
        // Partial overlap
        int[][] partialOverlap = {{1, 3}, {2, 6}};
        System.out.println("Partial overlap " + 
                          java.util.Arrays.deepToString(partialOverlap) + 
                          " -> " + java.util.Arrays.deepToString(merge(partialOverlap)));
        
        // No overlap
        int[][] noOverlap = {{1, 2}, {3, 4}};
        System.out.println("No overlap " + 
                          java.util.Arrays.deepToString(noOverlap) + 
                          " -> " + java.util.Arrays.deepToString(merge(noOverlap)));
        
        // Multiple merges
        int[][] multiMerge = {{1, 3}, {2, 6}, {8, 10}, {9, 12}, {15, 18}};
        System.out.println("Multiple merges " + 
                          java.util.Arrays.deepToString(multiMerge) + 
                          " -> " + java.util.Arrays.deepToString(merge(multiMerge)));
    }
    
    // Method to compare performance of different approaches
    public void compareApproaches(int[][] intervals) {
        System.out.println("\nComparing approaches for " + 
                          intervals.length + " intervals:");
        
        long start, end;
        
        // Sort and merge
        start = System.nanoTime();
        int[][] result1 = merge(intervals);
        end = System.nanoTime();
        System.out.println("Sort and Merge: " + 
                          java.util.Arrays.deepToString(result1) + 
                          " (Time: " + (end - start) + " ns)");
        
        // Explicit approach
        start = System.nanoTime();
        int[][] result2 = mergeExplicit(intervals);
        end = System.nanoTime();
        System.out.println("Explicit Merge: " + 
                          java.util.Arrays.deepToString(result2) + 
                          " (Time: " + (end - start) + " ns)");
        
        // Stack approach
        start = System.nanoTime();
        int[][] result3 = mergeStack(intervals);
        end = System.nanoTime();
        System.out.println("Stack Approach: " + 
                          java.util.Arrays.deepToString(result3) + 
                          " (Time: " + (end - start) + " ns)");
        
        // TreeMap approach (for smaller datasets)
        if (intervals.length <= 100) {
            start = System.nanoTime();
            int[][] result4 = mergeTreeMap(intervals);
            end = System.nanoTime();
            System.out.println("TreeMap Approach: " + 
                              java.util.Arrays.deepToString(result4) + 
                              " (Time: " + (end - start) + " ns)");
        }
    }
    
    // Method to test edge cases
    public void testEdgeCases() {
        System.out.println("\nTesting Edge Cases:");
        
        // Single interval
        int[][] single = {{1, 4}};
        System.out.println("Single interval: " + 
                          java.util.Arrays.deepToString(merge(single)));
        
        // Empty array (handled by caller)
        int[][] empty = {};
        System.out.println("Empty array: " + 
                          java.util.Arrays.deepToString(merge(empty)));
        
        // All same intervals
        int[][] same = {{1, 3}, {1, 3}, {1, 3}};
        System.out.println("All same: " + 
                          java.util.Arrays.deepToString(merge(same)));
        
        // Reverse sorted
        int[][] reverse = {{6, 8}, {4, 7}, {1, 3}};
        System.out.println("Reverse sorted: " + 
                          java.util.Arrays.deepToString(merge(reverse)));
        
        // All merge into one
        int[][] allMerge = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
        System.out.println("All merge: " + 
                          java.util.Arrays.deepToString(merge(allMerge)));
    }
    
    // Test method
    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Test cases
        int[][][] testCases = {
            {{1, 3}, {1, 5}, {6, 7}},
            {{1, 2}, {2, 3}},
            {{1, 4}, {4, 5}},
            {{1, 4}, {0, 4}},
            {{1, 4}, {2, 3}},
            {{2, 3}, {4, 5}, {6, 7}, {8, 9}, {1, 10}},
            {{1, 3}, {2, 6}, {8, 10}, {9, 12}, {15, 18}},
            {{1, 4}, {0, 2}, {3, 5}},
            {{1, 4}, {5, 6}},
            {{1, 2}, {3, 4}, {5, 6}, {7, 8}}
        };
        
        for (int i = 0; i < testCases.length; i++) {
            int[][] intervals = testCases[i];
            
            System.out.println("\nTest Case " + (i + 1) + ":");
            System.out.println("Input: " + 
                              java.util.Arrays.deepToString(intervals));
            
            int[][] result1 = solution.merge(intervals);
            int[][] result2 = solution.mergeExplicit(intervals);
            int[][] result3 = solution.mergeStack(intervals);
            int[][] result4 = solution.mergeTwoPass(intervals);
            
            System.out.println("Sort & Merge: " + 
                              java.util.Arrays.deepToString(result1));
            System.out.println("Explicit: " + 
                              java.util.Arrays.deepToString(result2));
            System.out.println("Stack: " + 
                              java.util.Arrays.deepToString(result3));
            System.out.println("Two-Pass: " + 
                              java.util.Arrays.deepToString(result4));
            
            // Demonstrate process for smaller test cases
            if (intervals.length <= 6) {
                solution.demonstrateMerge(intervals);
            }
            
            // Performance comparison for larger test cases
            if (intervals.length >= 4) {
                solution.compareApproaches(intervals);
            }
            
            System.out.println("---");
        }
        
        // Test overlap scenarios
        solution.testOverlapScenarios();
        
        // Test edge cases
        solution.testEdgeCases();
    }
}
