//https://neetcode.io/problems/insert-new-interval?list=blind75
public class Solution {
    
    // Approach 1: Three-Phase Algorithm - Most intuitive and clear
    public int[][] insert(int[][] intervals, int[] newInterval) {
        java.util.List<int[]> result = new java.util.ArrayList<>();
        int i = 0;
        int n = intervals.length;
        
        // Phase 1: Add all intervals that end before newInterval starts
        while (i < n && intervals[i][1] < newInterval[0]) {
            result.add(intervals[i]);
            i++;
        }
        
        // Phase 2: Merge all overlapping intervals with newInterval
        while (i < n && intervals[i][0] <= newInterval[1]) {
            // Merge: take minimum start and maximum end
            newInterval[0] = Math.min(newInterval[0], intervals[i][0]);
            newInterval[1] = Math.max(newInterval[1], intervals[i][1]);
            i++;
        }
        
        // Add the merged interval
        result.add(newInterval);
        
        // Phase 3: Add all remaining intervals
        while (i < n) {
            result.add(intervals[i]);
            i++;
        }
        
        return result.toArray(new int[result.size()][]);
    }
    
    // Approach 2: Single Pass with Explicit Overlap Check
    public int[][] insertSinglePass(int[][] intervals, int[] newInterval) {
        java.util.List<int[]> result = new java.util.ArrayList<>();
        boolean inserted = false;
        
        for (int[] interval : intervals) {
            if (interval[1] < newInterval[0]) {
                // Current interval ends before newInterval starts - no overlap
                result.add(interval);
            } else if (interval[0] > newInterval[1]) {
                // Current interval starts after newInterval ends - no overlap
                if (!inserted) {
                    result.add(newInterval);
                    inserted = true;
                }
                result.add(interval);
            } else {
                // Overlapping intervals - merge them
                newInterval[0] = Math.min(newInterval[0], interval[0]);
                newInterval[1] = Math.max(newInterval[1], interval[1]);
            }
        }
        
        // Add newInterval if not added yet (case when it comes after all intervals)
        if (!inserted) {
            result.add(newInterval);
        }
        
        return result.toArray(new int[result.size()][]);
    }
    
    // Approach 3: Binary Search + Merge - More efficient for large arrays
    public int[][] insertBinarySearch(int[][] intervals, int[] newInterval) {
        if (intervals.length == 0) {
            return new int[][]{newInterval};
        }
        
        // Find insertion point for start of newInterval
        int left = findInsertPosition(intervals, newInterval[0], true);
        
        // Find insertion point for end of newInterval
        int right = findInsertPosition(intervals, newInterval[1], false);
        
        java.util.List<int[]> result = new java.util.ArrayList<>();
        
        // Add intervals before merge point
        for (int i = 0; i < left; i++) {
            result.add(intervals[i]);
        }
        
        // Create merged interval
        int mergedStart = newInterval[0];
        int mergedEnd = newInterval[1];
        
        // Check if we need to merge with interval at left position
        if (left < intervals.length && intervals[left][0] <= newInterval[1]) {
            mergedStart = Math.min(mergedStart, intervals[left][0]);
        }
        
        // Check if we need to merge with interval at right position
        if (right >= 0 && intervals[right][1] >= newInterval[0]) {
            mergedEnd = Math.max(mergedEnd, intervals[right][1]);
        }
        
        // Find actual merge range
        int mergeStart = left;
        int mergeEnd = right;
        
        // Adjust merge boundaries
        while (mergeStart < intervals.length && 
               intervals[mergeStart][0] <= mergedEnd) {
            mergedStart = Math.min(mergedStart, intervals[mergeStart][0]);
            mergedEnd = Math.max(mergedEnd, intervals[mergeStart][1]);
            mergeStart++;
        }
        
        while (mergeEnd >= 0 && intervals[mergeEnd][1] >= mergedStart) {
            mergedStart = Math.min(mergedStart, intervals[mergeEnd][0]);
            mergedEnd = Math.max(mergedEnd, intervals[mergeEnd][1]);
            mergeEnd--;
        }
        
        // Simplified approach: use linear scan for merging
        return insertSinglePass(intervals, newInterval);
    }
    
    private int findInsertPosition(int[][] intervals, int target, 
                                  boolean findStart) {
        int left = 0, right = intervals.length;
        
        while (left < right) {
            int mid = left + (right - left) / 2;
            int compareValue = findStart ? intervals[mid][0] : intervals[mid][1];
            
            if (compareValue < target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        
        return left;
    }
    
    // Approach 4: Using TreeMap for automatic sorting (less efficient but elegant)
    public int[][] insertTreeMap(int[][] intervals, int[] newInterval) {
        java.util.TreeMap<Integer, Integer> map = new java.util.TreeMap<>();
        
        // Add all existing intervals
        for (int[] interval : intervals) {
            map.put(interval[0], interval[1]);
        }
        
        // Add new interval
        map.put(newInterval[0], newInterval[1]);
        
        // Merge overlapping intervals
        java.util.List<int[]> result = new java.util.ArrayList<>();
        
        for (java.util.Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int start = entry.getKey();
            int end = entry.getValue();
            
            if (result.isEmpty() || result.get(result.size() - 1)[1] < start) {
                // No overlap with previous interval
                result.add(new int[]{start, end});
            } else {
                // Merge with previous interval
                result.get(result.size() - 1)[1] = 
                    Math.max(result.get(result.size() - 1)[1], end);
            }
        }
        
        return result.toArray(new int[result.size()][]);
    }
    
    // Helper method to check if two intervals overlap
    private boolean isOverlapping(int[] interval1, int[] interval2) {
        return interval1[0] <= interval2[1] && interval2[0] <= interval1[1];
    }
    
    // Method to demonstrate the algorithm step by step
    public void demonstrateInsertion(int[][] intervals, int[] newInterval) {
        System.out.println("\nDemonstrating Insert Interval:");
        System.out.println("Original intervals: " + 
                          java.util.Arrays.deepToString(intervals));
        System.out.println("New interval: " + 
                          java.util.Arrays.toString(newInterval));
        
        java.util.List<int[]> result = new java.util.ArrayList<>();
        int i = 0;
        int n = intervals.length;
        
        // Phase 1: Add intervals that end before newInterval starts
        System.out.println("\nPhase 1: Add non-overlapping intervals before:");
        while (i < n && intervals[i][1] < newInterval[0]) {
            result.add(intervals[i]);
            System.out.println("  Added: " + 
                              java.util.Arrays.toString(intervals[i]) + 
                              " (ends at " + intervals[i][1] + 
                              " < " + newInterval[0] + ")");
            i++;
        }
        
        // Phase 2: Merge overlapping intervals
        System.out.println("\nPhase 2: Merge overlapping intervals:");
        int[] mergedInterval = newInterval.clone();
        System.out.println("  Starting with newInterval: " + 
                          java.util.Arrays.toString(mergedInterval));
        
        while (i < n && intervals[i][0] <= newInterval[1]) {
            System.out.println("  Merging with: " + 
                              java.util.Arrays.toString(intervals[i]));
            
            int oldStart = mergedInterval[0];
            int oldEnd = mergedInterval[1];
            
            mergedInterval[0] = Math.min(mergedInterval[0], intervals[i][0]);
            mergedInterval[1] = Math.max(mergedInterval[1], intervals[i][1]);
            
            System.out.println("    Before: [" + oldStart + "," + oldEnd + "]");
            System.out.println("    After:  " + 
                              java.util.Arrays.toString(mergedInterval));
            i++;
        }
        
        result.add(mergedInterval);
        System.out.println("  Final merged interval: " + 
                          java.util.Arrays.toString(mergedInterval));
        
        // Phase 3: Add remaining intervals
        System.out.println("\nPhase 3: Add remaining intervals:");
        while (i < n) {
            result.add(intervals[i]);
            System.out.println("  Added: " + 
                              java.util.Arrays.toString(intervals[i]));
            i++;
        }
        
        System.out.println("\nFinal result: " + 
                          java.util.Arrays.deepToString(
                              result.toArray(new int[result.size()][])));
    }
    
    // Method to test various edge cases
    public void testEdgeCases() {
        System.out.println("\nTesting Edge Cases:");
        
        // Empty intervals
        int[][] empty = {};
        int[] newInterval1 = {2, 5};
        System.out.println("Empty + [2,5]: " + 
                          java.util.Arrays.deepToString(
                              insert(empty, newInterval1)));
        
        // New interval before all existing
        int[][] intervals2 = {{3, 5}, {6, 9}};
        int[] newInterval2 = {1, 2};
        System.out.println("[3,5],[6,9] + [1,2]: " + 
                          java.util.Arrays.deepToString(
                              insert(intervals2, newInterval2)));
        
        // New interval after all existing
        int[][] intervals3 = {{1, 2}, {3, 5}};
        int[] newInterval3 = {6, 8};
        System.out.println("[1,2],[3,5] + [6,8]: " + 
                          java.util.Arrays.deepToString(
                              insert(intervals3, newInterval3)));
        
        // New interval merges all existing
        int[][] intervals4 = {{1, 2}, {3, 5}, {6, 7}, {8, 10}};
        int[] newInterval4 = {0, 11};
        System.out.println("Multiple intervals + [0,11]: " + 
                          java.util.Arrays.deepToString(
                              insert(intervals4, newInterval4)));
        
        // Adjacent but non-overlapping
        int[][] intervals5 = {{1, 5}};
        int[] newInterval5 = {6, 8};
        System.out.println("[1,5] + [6,8]: " + 
                          java.util.Arrays.deepToString(
                              insert(intervals5, newInterval5)));
        
        // Exactly adjacent (touching)
        int[][] intervals6 = {{1, 5}};
        int[] newInterval6 = {5, 8};
        System.out.println("[1,5] + [5,8]: " + 
                          java.util.Arrays.deepToString(
                              insert(intervals6, newInterval6)));
    }
    
    // Method to compare performance of different approaches
    public void compareApproaches(int[][] intervals, int[] newInterval) {
        System.out.println("\nComparing approaches for " + 
                          intervals.length + " intervals:");
        
        long start, end;
        
        // Three-phase approach
        start = System.nanoTime();
        int[][] result1 = insert(intervals, newInterval);
        end = System.nanoTime();
        System.out.println("Three-phase: " + 
                          java.util.Arrays.deepToString(result1) + 
                          " (Time: " + (end - start) + " ns)");
        
        // Single pass approach
        start = System.nanoTime();
        int[][] result2 = insertSinglePass(intervals, newInterval);
        end = System.nanoTime();
        System.out.println("Single pass: " + 
                          java.util.Arrays.deepToString(result2) + 
                          " (Time: " + (end - start) + " ns)");
        
        // TreeMap approach (for smaller datasets)
        if (intervals.length <= 100) {
            start = System.nanoTime();
            int[][] result3 = insertTreeMap(intervals, newInterval);
            end = System.nanoTime();
            System.out.println("TreeMap: " + 
                              java.util.Arrays.deepToString(result3) + 
                              " (Time: " + (end - start) + " ns)");
        }
    }
    
    // Test method
    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Test cases
        int[][][] testCases = {
            {{{1, 3}, {4, 6}}, {{2, 5}}},
            {{{1, 2}, {3, 5}, {9, 10}}, {{6, 7}}},
            {{{1, 2}, {3, 5}, {6, 7}, {8, 10}, {12, 16}}, {{4, 8}}},
            {{}, {{5, 7}}},
            {{{1, 5}}, {{0, 3}}},
            {{{1, 5}}, {{2, 3}}},
            {{{1, 5}}, {{6, 8}}},
            {{{3, 5}, {12, 15}}, {{6, 6}}},
            {{{1, 2}, {3, 4}, {5, 6}}, {{0, 7}}},
            {{{1, 2}, {6, 9}}, {{3, 5}}}
        };
        
        for (int i = 0; i < testCases.length; i++) {
            int[][] intervals = testCases[i][0];
            int[] newInterval = testCases[i][1][0];
            
            System.out.println("\nTest Case " + (i + 1) + ":");
            System.out.println("Intervals: " + 
                              java.util.Arrays.deepToString(intervals));
            System.out.println("New interval: " + 
                              java.util.Arrays.toString(newInterval));
            
            int[][] result1 = solution.insert(intervals, newInterval);
            int[][] result2 = solution.insertSinglePass(intervals, newInterval);
            int[][] result3 = solution.insertTreeMap(intervals, newInterval);
            
            System.out.println("Three-phase result: " + 
                              java.util.Arrays.deepToString(result1));
            System.out.println("Single-pass result: " + 
                              java.util.Arrays.deepToString(result2));
            System.out.println("TreeMap result: " + 
                              java.util.Arrays.deepToString(result3));
            
            // Demonstrate algorithm for smaller test cases
            if (intervals.length <= 5) {
                solution.demonstrateInsertion(intervals, newInterval);
            }
            
            // Performance comparison for larger test cases
            if (intervals.length >= 3) {
                solution.compareApproaches(intervals, newInterval);
            }
            
            System.out.println("---");
        }
        
        // Test edge cases
        solution.testEdgeCases();
    }
}
